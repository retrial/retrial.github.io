{"version":3,"file":"static/js/995.e2f211f2.chunk.js","mappings":"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","sources":["components/AdminCabinet/AdminUsers/index.js","helpers/ModalPopup/index.js","helpers/reactSelectStyles.js","helpers/selectOptions.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport Select from \"react-select\";\nimport { colourStyles } from \"../../../helpers/reactSelectStyles\";\nimport ModalPopup from \"../../../helpers/ModalPopup\";\nimport { prepareOptions } from \"../../../helpers/selectOptions\";\nimport ReactTable from \"react-table\";\nimport \"./index.less\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport {\n  addNewAdmin,\n  deleteAdmin,\n  getAllAdmins,\n  getOptions,\n  getRoles,\n  sendResetEmail,\n  updateAdmin,\n} from \"../../../requests/adminRequests\";\n\nfunction columns({\n  prepareRoles,\n  setDefaultSelectValue,\n  roles,\n  handlerShowPopup,\n  dispatch,\n}) {\n  let options = {\n    roleName: \"\",\n    status: \"\",\n  };\n  const onSelectChange = (type, value) => {\n    options[type] = value;\n  };\n  return [\n    {\n      Header: \"User Id\",\n      accessor: \"publicId\",\n    },\n    {\n      Header: \"User Name\",\n      accessor: \"fullName\",\n    },\n    {\n      Header: \"Email\",\n      accessor: \"email\",\n    },\n    {\n      Header: \"Role\",\n      id: \"Role\",\n      Cell: (row) => (\n        <Select\n          defaultValue={setDefaultSelectValue(row.original.role.name)}\n          options={prepareRoles(roles)}\n          className=\"react-select-container\"\n          classNamePrefix=\"react-select\"\n          onChange={(selectedOption) =>\n            onSelectChange(\"roleName\", selectedOption.value)\n          }\n          name=\"purpose\"\n          placeholder=\"\"\n          styles={colourStyles}\n        />\n      ),\n    },\n    {\n      Header: \"Status\",\n      id: \"Status\",\n      Cell: (row) => (\n        <Select\n          defaultValue={setDefaultSelectValue(row.original.status.name)}\n          options={prepareOptions([\n            { id: 1, name: \"active\" },\n            { id: 2, name: \"blocked\" },\n          ])}\n          className=\"react-select-container\"\n          classNamePrefix=\"react-select\"\n          onChange={(selectedOption) =>\n            onSelectChange(\"status\", selectedOption.value)\n          }\n          name=\"purpose\"\n          placeholder=\"\"\n          styles={colourStyles}\n        />\n      ),\n    },\n    {\n      Header: \"Last Login\",\n      accessor: \"lastSeenAt\",\n    },\n    {\n      Header: \"Delete Admin\",\n      sortable: false,\n      Cell: (row) => {\n        return (\n          <span\n            onClick={() => handlerShowPopup(row.original.id, \"deleteAdmin\")}\n            className=\"adminTableActions\"\n          >\n            <img\n              className=\"resetPass-icon\"\n              src=\"/img/svg/reject.svg\"\n              title=\"Delete admin\"\n              alt=\"Delete admin\"\n            />\n          </span>\n        );\n      },\n    },\n    {\n      Header: \"Reset Password\",\n      sortable: false,\n      Cell: (row) => {\n        return (\n          <span\n            onClick={() => handlerShowPopup(row.original.email, \"resetPass\")}\n            className=\"adminTableActions\"\n          >\n            <img\n              className=\"resetPass-icon\"\n              src=\"/img/svg/reset_pass.svg\"\n              title=\"Reset password\"\n              alt=\"Reset password\"\n            />\n          </span>\n        );\n      },\n    },\n    {\n      Header: \"Save\",\n      sortable: false,\n      Cell: (row) => {\n        return (\n          <span\n            onClick={() => {\n              if (!options.roleName) {\n                options.roleName = row.original.role.name;\n              }\n              if (!options.status) {\n                options.status = row.original.status.id;\n              }\n              dispatch(updateAdmin(row.original.id));\n            }}\n            className=\"adminTableActions\"\n          >\n            <i className=\"far fa-save\" />\n          </span>\n        );\n      },\n    },\n  ];\n}\n\nconst AdminUsers = () => {\n  const dispatch = useDispatch();\n  const rolesList = useSelector((store) => store.options.roles);\n  const adminsList = useSelector((store) => store.allClients.allAdmins);\n  const [state, setState] = useState({\n    firstName: \"\",\n    lastName: \"\",\n    email: \"\",\n    userRole: \"\",\n    isLoading: true,\n    showPopup: false,\n    adminEmail: \"\",\n    adminId: \"\",\n    action: \"\",\n    roles: rolesList || [],\n    admins: adminsList || [],\n    updateAdminRole: \"\",\n    updateAdminStatus: \"\",\n  });\n  useEffect(() => {\n    dispatch(getOptions());\n    dispatch(getAllAdmins());\n    dispatch(getRoles());\n  }, []);\n  useEffect(() => {\n    setState((prevState) => ({\n      ...prevState,\n      roles: rolesList,\n      admins: adminsList,\n      isLoading: false,\n    }));\n  }, [rolesList, adminsList]);\n  const prepareRoles = (roles) => {\n    let optRoles = [];\n    if (Object.values(roles).length) {\n      Object.values(roles).map((el) => {\n        optRoles.push({ value: el.name, label: el.name });\n      });\n    }\n    return optRoles;\n  };\n  const handleOnChange = (type, value) => {\n    setState((prevState) => ({\n      ...prevState,\n      [type]: value,\n    }));\n  };\n  const setDefaultSelectValue = (value) => {\n    return [{ value: value, label: value }];\n  };\n  const handlerShowPopup = (data, action) => {\n    action === \"resetPass\"\n      ? setState((prevState) => ({\n          ...prevState,\n          showPopup: true,\n          adminEmail: data,\n          action: action,\n        }))\n      : setState((prevState) => ({\n          ...prevState,\n          showPopup: true,\n          adminId: data,\n          action: action,\n        }));\n  };\n  const handlerClosePopup = () => {\n    setState((prevState) => ({\n      ...prevState,\n      showPopup: false,\n    }));\n  };\n  const {\n    isLoading,\n    firstName,\n    lastName,\n    email,\n    userRole,\n    showPopup,\n    adminEmail,\n    roles,\n    admins,\n    action,\n    adminId,\n  } = state;\n  const data = admins.data || [];\n  const newUser = {\n    firstName: firstName,\n    lastName: lastName,\n    email: email,\n    roleName: userRole,\n  };\n  return (\n    !isLoading && (\n      <div className=\"container-wrap\">\n        <div className=\"addressContainer mb\">\n          <h4>Add new back office user</h4>\n          <ul className=\"adminUsersList\">\n            <li>\n              <span>First name</span>\n              <input\n                value={firstName}\n                onChange={(e) => handleOnChange(\"firstName\", e.target.value)}\n                className=\"react-select-container\"\n                type=\"text\"\n                name=\"firstName\"\n              />\n            </li>\n            <li>\n              <span>Last name</span>\n              <input\n                value={lastName}\n                onChange={(e) => handleOnChange(\"lastName\", e.target.value)}\n                className=\"react-select-container\"\n                type=\"text\"\n                name=\"lastName\"\n              />\n            </li>\n            <li>\n              <span>Email</span>\n              <input\n                value={email}\n                onChange={(e) => handleOnChange(\"email\", e.target.value)}\n                className=\"react-select-container\"\n                type=\"email\"\n                name=\"email\"\n              />\n            </li>\n            <li>\n              <span>User Role</span>\n              <Select\n                value={setDefaultSelectValue(userRole || \"Select role...\")}\n                onChange={(selectedOption) =>\n                  handleOnChange(\"userRole\", selectedOption.value)\n                }\n                options={prepareRoles(roles)}\n                className=\"react-select-container\"\n                classNamePrefix=\"react-select\"\n                name=\"userRole\"\n                styles={colourStyles}\n              />\n            </li>\n          </ul>\n          <div className=\"profileButton\">\n            <span\n              onClick={() => {\n                dispatch(addNewAdmin(newUser));\n                setState((prevState) => ({\n                  ...prevState,\n                  firstName: \"\",\n                  lastName: \"\",\n                  email: \"\",\n                  userRole: \"\",\n                }));\n              }}\n              className=\"profileButton-submit\"\n            >\n              Submit\n            </span>\n          </div>\n        </div>\n        <ReactTable\n          data={data}\n          defaultPageSize={10}\n          getTableProps={() => {\n            return {\n              style: { overflow: \"visible\" },\n            };\n          }}\n          getTbodyProps={() => {\n            return {\n              style: { overflow: \"visible\" },\n            };\n          }}\n          columns={columns({\n            prepareRoles,\n            setDefaultSelectValue,\n            roles,\n            handlerShowPopup,\n            dispatch,\n          })}\n          defaultSorted={[\n            {\n              id: \"id\",\n              desc: true,\n            },\n          ]}\n          getTdProps={(state, rowInfo, column) => {\n            return {\n              style:\n                column.id === \"Role\" || column.id === \"Status\"\n                  ? { overflow: \"visible\", padding: \"0 7px\" }\n                  : {},\n            };\n          }}\n        />\n        {showPopup && (\n          <ModalPopup\n            onYes={() => {\n              action === \"resetPass\"\n                ? dispatch(sendResetEmail(adminEmail))\n                : dispatch(deleteAdmin(adminId));\n            }}\n            onClose={(e) => handlerClosePopup(e)}\n            title={action === \"resetPass\" ? \"Reset password?\" : \"Delete admin?\"}\n            ok={\"Yes\"}\n            cancel={\"No\"}\n            id={adminEmail}\n          />\n        )}\n      </div>\n    )\n  );\n};\n\nexport default AdminUsers;\n","import React from \"react\";\nimport \"./index.less\";\nimport PropTypes from \"prop-types\";\n\nconst ModalPopup = ({\n  onClose,\n  onYes,\n  id,\n  children,\n  title,\n  ok,\n  cancel,\n  type,\n  onChange,\n}) => {\n  return (\n    <div onClick={(e) => onClose(e)} className=\"popupOverlay\">\n      <div className=\"popupContent\" onClick={(e) => e.stopPropagation()}>\n        <div className=\"modalPopup\">\n          <h2>{title}</h2>\n          {type && type === \"reject\" && (\n            <React.Fragment>\n              <label htmlFor=\"modalPopup-comment\">Comment:</label>\n              <textarea\n                onFocus={(e) => e.stopPropagation()}\n                onKeyPress={(e) => {\n                  if (e.key === \"Enter\") {\n                    onYes(e);\n                  }\n                }}\n                onChange={(e) => onChange(e)}\n                rows=\"3\"\n                id=\"modalPopup-comment\"\n                className=\"modalPopup-comment\"\n              />\n            </React.Fragment>\n          )}\n          <div className=\"modalPopup-buttons\">\n            <span\n              onClick={(e) => {\n                onYes(id);\n                onClose(e);\n              }}\n            >\n              {ok}\n            </span>\n            <span onClick={(e) => onClose(e)}>{cancel}</span>\n          </div>\n          {children}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nModalPopup.propTypes = {\n  onClose: PropTypes.any,\n  onYes: PropTypes.any,\n  id: PropTypes.any,\n  children: PropTypes.any,\n  title: PropTypes.any,\n  ok: PropTypes.any,\n  cancel: PropTypes.any,\n  type: PropTypes.any,\n  onChange: PropTypes.any,\n};\n\nexport default ModalPopup;\n","export const colourStyles = {\n  option: (styles, { isDisabled, isFocused, isSelected }) => {\n    return {\n      ...styles,\n      backgroundColor: isSelected\n        ? \"var(--no-active-tabs)\"\n        : isFocused\n        ? \"var(--no-active-tabs)\"\n        : \"var(--main-bg-color)\",\n      borderTop: isSelected ? \"1px solid var(--border-color)\" : \"none\",\n      borderBottom: isSelected ? \"1px solid var(--border-color)\" : \"none\",\n      color: \"#FFF\",\n      cursor: \"pointer\",\n    };\n  },\n  placeholder: (styles) => {\n    return {\n      ...styles,\n      color: \"var(--text-white-color)\",\n    };\n  },\n  singleValue: (styles) => {\n    return {\n      ...styles,\n      color: \"var(--text-white-color)\",\n    };\n  },\n  input: (styles) => {\n    return {\n      ...styles,\n      color: \"var(--text-white-color)\",\n      padding: \"2px\",\n    };\n  },\n  indicatorSeparator: (styles) => {\n    return {\n      ...styles,\n      display: \"none\",\n    };\n  },\n  dropdownIndicator: (styles) => {\n    return {\n      ...styles,\n      padding: \"0\",\n      color: \"var(--text-white-color)\",\n    };\n  },\n  menu: (styles) => {\n    return {\n      ...styles,\n      boxSizing: \"border-box\",\n      background: \"var(--main-bg-color)\",\n    };\n  },\n  container: (styles) => {\n    return {\n      ...styles,\n      boxSizing: \"border-box\",\n      maxHeight: \"30px\",\n      fontSize: \"12px\",\n      width: \"100%\",\n      marginRight: \"2px\",\n    };\n  },\n  control: (styles) => {\n    return {\n      ...styles,\n      boxSizing: \"border-box\",\n      height: \"30px\",\n      display: \"flex\",\n      minHeight: \"0\",\n      alignItems: \"center\",\n      border: \"none\",\n      borderRadius: \"0\",\n      background: \"var(--main-bg-color)\",\n      boxShadow: \"none\",\n    };\n  },\n};\n","import moment from \"moment\";\nimport React from \"react\";\n\nexport const dateOptions = {\n  days: () => {\n    let days = [];\n    for (let i = 1; i <= 31; i++) {\n      days.push({\n        label: i,\n        value: i.toString().length > 1 ? i.toString() : \"0\" + i,\n      });\n    }\n    return days;\n  },\n  months: () => {\n    let months = [];\n    let start = new Date(1970, 0);\n    for (let i = 0; i < 12; i++) {\n      months.push({\n        label: moment(start.getMilliseconds()).add(i, \"month\").format(\"MMMM\"),\n        value: i.toString().length > 1 ? (i + 1).toString() : \"0\" + (i + 1),\n      });\n    }\n    return months;\n  },\n  years: () => {\n    let years = [];\n    let date = new Date();\n    let lastYear = date.getFullYear() - 18;\n    for (let i = 1920; i <= lastYear; i++) {\n      years.push({ label: i.toString(), value: i.toString() });\n    }\n    return years;\n  },\n};\nfunction optsMapper(opt) {\n  return { value: opt.id, label: opt.name };\n}\nexport const prepareOptions = (options) =>\n  options ? options.map(optsMapper) : [];\nexport const customSelectFilter = ({ filter, onChange, options }) => {\n  return (\n    <select\n      onChange={(event) => onChange(event.target.value)}\n      style={{\n        width: \"100%\",\n        height: \"20px\",\n        padding: 0,\n        background: \"#252f35\",\n        color: \"#fff\",\n      }}\n      value={filter ? filter.value : \"all\"}\n    >\n      <option value=\"\">Show All</option>\n      {options\n        .filter((item, i, s) => s.lastIndexOf(item) == i)\n        .map(function (item) {\n          return (\n            <option key={item.key} value={item.key}>\n              {item.value}\n            </option>\n          );\n        })}\n    </select>\n  );\n};\n"],"names":["columns","_ref","prepareRoles","setDefaultSelectValue","roles","handlerShowPopup","dispatch","options","roleName","status","onSelectChange","type","value","Header","accessor","id","Cell","row","_jsx","Select","defaultValue","original","role","name","className","classNamePrefix","onChange","selectedOption","placeholder","styles","colourStyles","prepareOptions","sortable","onClick","children","src","title","alt","email","updateAdmin","AdminUsers","useDispatch","rolesList","useSelector","store","adminsList","allClients","allAdmins","state","setState","useState","firstName","lastName","userRole","isLoading","showPopup","adminEmail","adminId","action","admins","updateAdminRole","updateAdminStatus","useEffect","getOptions","getAllAdmins","getRoles","prevState","optRoles","Object","values","length","map","el","push","label","handleOnChange","data","newUser","_jsxs","e","target","addNewAdmin","ReactTable","defaultPageSize","getTableProps","style","overflow","getTbodyProps","defaultSorted","desc","getTdProps","rowInfo","column","padding","ModalPopup","onYes","sendResetEmail","deleteAdmin","onClose","ok","cancel","stopPropagation","React","htmlFor","onFocus","onKeyPress","key","rows","option","isDisabled","isFocused","isSelected","backgroundColor","borderTop","borderBottom","color","cursor","singleValue","input","indicatorSeparator","display","dropdownIndicator","menu","boxSizing","background","container","maxHeight","fontSize","width","marginRight","control","height","minHeight","alignItems","border","borderRadius","boxShadow","dateOptions","days","i","toString","months","start","Date","moment","getMilliseconds","add","format","years","lastYear","getFullYear","optsMapper","opt","customSelectFilter","filter","event","item","s","lastIndexOf"],"sourceRoot":""}