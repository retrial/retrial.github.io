{"version":3,"file":"static/js/976.79c62858.chunk.js","mappings":"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","sources":["components/SetNewAdminPassword/index.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { I18n } from \"react-redux-i18n\";\nimport Input from \"../Common/Input\";\nimport Button from \"../Common/Button\";\nimport \"./index.less\";\nimport {\n  LOGIN,\n  PASSWORD,\n  CONFIRM_PASSWORD,\n  SUBMIT,\n  SET_NEW_PASSWORD,\n} from \"../../utils/config/language\";\nimport CenteredBlock from \"../Common/CenteredBlock\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { onChangeInputData } from \"../../store/actions/userActions\";\nimport * as UserActions from \"../../store/actions/userActions\";\nimport { useNavigate } from \"react-router\";\nimport { useLocation } from \"react-router-dom\";\nimport { onSetNewAdminPassword } from \"../../requests/userRequests\";\n\nconst SetNewAdminPassword = () => {\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const location = useLocation();\n  const messages = useSelector((store) => store.user.messages);\n  const [state, setState] = useState({\n    login: \"\",\n    password: \"\",\n    confirmPassword: \"\",\n    activationCode: \"\",\n    showPass: false,\n    showConfirmPass: false,\n  });\n  useEffect(() => {\n    dispatch(UserActions.resetAllErrorMessageAction());\n    getActivationCode();\n  }, []);\n  const handleOnChange = (type, event) => {\n    setState((prevState) => ({\n      ...prevState,\n      [type]: event.target.value,\n    }));\n    let args = { field: type, value: event.target.value };\n    dispatch(onChangeInputData(args));\n  };\n  const handleOnClick = (event) => {\n    const { login, password, confirmPassword, activationCode } = state;\n    const adminData = {\n      login: login,\n      password: password,\n      confirmPassword: confirmPassword,\n      code: activationCode,\n    };\n    event.preventDefault();\n    if (!messages[\"password\"] && !messages[\"email\"]) {\n      dispatch(onSetNewAdminPassword(adminData, navigate));\n    }\n  };\n  const getActivationCode = () => {\n    let query = location.pathname.split(\"=\");\n    setState((prevState) => ({\n      ...prevState,\n      activationCode: query[query.length - 1],\n    }));\n  };\n  const handleShowPasswordToggle = (type) => {\n    setState((prevState) => ({\n      ...prevState,\n      [type]: !prevState[type],\n    }));\n  };\n  const { login, password, confirmPassword, showPass, showConfirmPass } = state;\n  return (\n    <CenteredBlock title={I18n.t(`buttons.${SET_NEW_PASSWORD}`)}>\n      <form onSubmit={(event) => handleOnClick(event)}>\n        <Input\n          type=\"text\"\n          name=\"login\"\n          title={`register.${LOGIN}`}\n          className=\"\"\n          placeholder={`register.${LOGIN}`}\n          value={login}\n          error={messages[\"login\"]}\n          onChange={(event) => handleOnChange(\"login\", event)}\n          onBlur={(event) => handleOnChange(\"login\", event)}\n        />\n        <div className=\"newPassInputs-wrap\">\n          <img\n            onMouseDown={() => handleShowPasswordToggle(\"showPass\")}\n            onMouseUp={() => handleShowPasswordToggle(\"showPass\")}\n            className=\"showPassIcon\"\n            src=\"/img/svg/showPass.svg\"\n            alt=\"show password\"\n          />\n          <Input\n            type={showPass ? \"password\" : \"text\"}\n            name=\"password\"\n            id=\"password\"\n            title={`register.${PASSWORD}`}\n            className=\"\"\n            placeholder={`register.${PASSWORD}`}\n            value={password}\n            error={messages[\"password\"]}\n            onChange={(event) => handleOnChange(\"password\", event)}\n            onBlur={(event) => handleOnChange(\"password\", event)}\n          />\n        </div>\n        <div className=\"newPassInputs-wrap\">\n          <img\n            onMouseDown={() => handleShowPasswordToggle(\"showConfirmPass\")}\n            onMouseUp={() => handleShowPasswordToggle(\"showConfirmPass\")}\n            className=\"showPassIcon\"\n            src=\"/img/svg/showPass.svg\"\n            alt=\"show password\"\n          />\n          <Input\n            type={showConfirmPass ? \"password\" : \"text\"}\n            name=\"confirmPassword\"\n            id=\"confirmPassword\"\n            title={`register.${PASSWORD}`}\n            className=\"\"\n            placeholder={`register.${CONFIRM_PASSWORD}`}\n            value={confirmPassword}\n            error={messages[\"confirmPassword\"]}\n            onChange={(event) => handleOnChange(\"confirmPassword\", event)}\n            onBlur={(event) => handleOnChange(\"confirmPassword\", event)}\n          />\n        </div>\n        <div className=\"signin-btn-wrapper\">\n          <Button\n            type=\"submit\"\n            className=\"signin-btn btn-green\"\n            onClick={(event) => handleOnClick(event)}\n          >\n            {I18n.t(`buttons.${SUBMIT}`)}\n          </Button>\n        </div>\n      </form>\n    </CenteredBlock>\n  );\n};\n\nexport default SetNewAdminPassword;\n"],"names":["SetNewAdminPassword","dispatch","useDispatch","navigate","useNavigate","location","useLocation","messages","useSelector","store","user","state","setState","useState","login","password","confirmPassword","activationCode","showPass","showConfirmPass","useEffect","UserActions","getActivationCode","handleOnChange","type","event","prevState","target","value","args","field","onChangeInputData","handleOnClick","adminData","code","preventDefault","onSetNewAdminPassword","query","pathname","split","length","handleShowPasswordToggle","_jsx","CenteredBlock","title","I18n","t","concat","SET_NEW_PASSWORD","children","_jsxs","onSubmit","Input","name","LOGIN","className","placeholder","error","onChange","onBlur","onMouseDown","onMouseUp","src","alt","id","PASSWORD","CONFIRM_PASSWORD","Button","onClick","SUBMIT"],"sourceRoot":""}